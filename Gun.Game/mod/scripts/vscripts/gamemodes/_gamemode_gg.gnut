global function GamemodeGG_Init

array<string> playerHSNames = [] //players that have HouseFlies enabled
table<string, int> playerHSKills
array<string> adminNames = ["admin1", "admin2"] // admins
bool hsOn
int HSLimit = 15

table<string, int> killStreak
table<string, int> SaveScore

int bankrupt_base_value
// highlight best player
// 50% hp for good player
struct {
	string score_leader_highlight = "enemy_boss_bounty" // highlight effect applied to person in 1st place
	string offhand_weapon = "mp_weapon_thermite_grenade" // offhand weapon

	bool reset_pulse_blade_cooldown_on_pulse_blade_kill
	bool softball_enabled

	int wme_kill_value
	int softball_kill_value
	int offhand_kill_value
	int reset_kill_value
	int melee_kill_value
} file

void function GamemodeGG_Init()
{
	//house flies commands
	AddClientCommandCallback("hs", EnablehsCMD); // this command toggles hs to all or a certain players syntax: hs <name/all> 0/1
	Server_AddCustomScoreboardColumn("Pulse Kills", PGS_NPC_KILLS , 2 )
	Server_AddCustomScoreboardColumn("Times Bankrupted", PGS_TITAN_KILLS , 2 )

	SetSpawnpointGamemodeOverride( FFA )

	SetShouldUseRoundWinningKillReplay( true )
	ClassicMP_ForceDisableEpilogue( true )
	SetLoadoutGracePeriodEnabled( false ) // prevent modifying loadouts with grace period
	SetWeaponDropsEnabled( false )
	Riff_ForceTitanAvailability( eTitanAvailability.Never )
	Riff_ForceBoostAvailability( eBoostAvailability.Disabled )

	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnPlayerKilled( OnPlayerKilled )
	AddCallback_OnClientDisconnected(OnPlayerDisconnected)

	AddCallback_GameStateEnter( eGameState.WinnerDetermined, OnWinnerDetermined )

	AddCallback_GGEarnMeterFull( OnGGEarnMeterFilled )

    // CUSTOM
    AddCallback_OnClientConnected(OnClientConnected)

	if( RandomInt( 100 ) == 1 ) // easter egg (enables house flies for everyone)
	{
		hsOn = true;
		foreach( entity player in GetPlayerArray() )
			playerHSNames.append( player.GetPlayerName() )
	}
	else
	{
		hsOn = false;
	}
	try
	{
		if ( GetCurrentPlaylistVarInt( "scorelimit", GetGunGameWeapons().len() ) != GetGunGameWeapons().len() )
			SetPlaylistVarOverride( "scorelimit", GetGunGameWeapons().len().tostring() )
	}
	catch ( ex ) {}

	bankrupt_base_value = 5
}

bool function EnablehsCMD( entity player, array < string > args )
{
    #if SERVER
	string playerName = player.GetPlayerName()
	if( adminNames.find(playerName) != -1) // checks if player is an admin
	{
		if(args.len() == 0) // if only hs entered
			{
				SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				return true
			}
		switch ( args[0] )
		{
			// if has all entered
			case("all"):
				if(args[1] == "1")
				{
					hsOn = true;
					foreach( entity pl in GetPlayerArray() )
					{
						if( playerHSNames.find( pl.GetPlayerName() ) == -1 )
						{
							playerHSNames.append( pl.GetPlayerName() )
							UpdateLoadout(pl)
						}
					}
				}
				else if(args[1] == "0")
					{
						hsOn = false;
						playerHSNames.clear()
						foreach( entity pl in GetPlayerArray() )
							UpdateLoadout(pl)
					}
				// if something that isnt 1 or 0 was entered
				else
					SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				break;

			// if a 0 was entered in stead of a player's name
			case("0"): 
				SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				break;

			 // if a 1 was entered in stead of a player's name
			case("1"):
				SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				break;

			default:
				bool found = false
				int playerIndex
				// checks if the player entered is connected 
				for( int i = 0 ; i < GetPlayerArray().len() ; i++ )
				{
					entity pl = GetPlayerArray()[i]
					if( pl.GetPlayerName() == args[0] )
					{
						found = true
						playerIndex = i
					}
				}
				if( found )
					{
						if( args[1] == "0" )
						{
							if( playerHSNames.find(args[0]) != -1 )
							{
								playerHSNames.remove( playerHSNames.find(args[0]) )
								UpdateLoadout( GetPlayerArray()[playerIndex] )
							}
						}
						else if( args[1] == "1")
						{
							if( playerHSNames.find(args[0]) == -1 )
							{
								playerHSNames.append( args[0] )
								UpdateLoadout( GetPlayerArray()[playerIndex] )
							}
						}
						else
							SendHudMessage(player, "dumb!!! syntax: hs <name|all> <0/1>", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
					}
				else
					SendHudMessage(player, "wrong syntax or player not found", -1, 0.4, 255, 200, 200, 0, 0, 5, 0.15)
				break;
		}
	}
    #endif
    return true
}

void function OnPlayerDisconnected(entity player)
{
	SaveScore[player.GetPlayerName()] <- GameRules_GetTeamScore( player.GetTeam() )

	// this prevents a new player to get someone who's left's score
	AddTeamScore( player.GetTeam(), -GameRules_GetTeamScore( player.GetTeam() ))
	killStreak[player.GetPlayerName()] = 0
	if (GetWinningPlayer() == player)
		thread CheckNewHighlight(player)

}

void function OnPlayerRespawned( entity player )
{
    StatusEffect_AddTimed( player, eStatusEffect.speed_boost, 0.4, 4.25, 0.25)
	UpdateLoadout( player )
	thread OnPlayerRespawned_Threaded( player )
}

void function OnPlayerRespawned_Threaded( entity player )
{
	// bit of a hack, need to rework earnmeter code to have better support for completely disabling it
	// rn though this just waits for earnmeter code to set the mode before we set it back
	WaitFrame()
	if ( IsValid( player ) )
		PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
}

void function RemovePilotKill( entity player )
{
	WaitFrame()
	player.AddToPlayerGameStat( PGS_PILOT_KILLS, -1 )
}

void function OnPlayerKilled( entity victim, entity attacker, var damageInfo )
{		
	if ( !victim.IsPlayer() || !attacker.IsPlayer() || GetGameState() != eGameState.Playing )
		return
	
	if ( victim != attacker && victim.IsPlayer() && attacker.IsPlayer() && GetGameState() == eGameState.Playing )
	{
		SetRoundWinningKillReplayAttacker(attacker)
		if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.mp_weapon_grenade_sonar || DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.human_execution)
		{
			if (file.reset_pulse_blade_cooldown_on_pulse_blade_kill) 
			{
				attacker.TakeWeaponNow( "mp_weapon_grenade_sonar" ) // resets cooldown if you kill with it
				attacker.GiveOffhandWeapon( "mp_weapon_grenade_sonar", 2 )
			}
			
			EmitSoundOnEntityOnlyToPlayer( attacker, attacker, "UI_CTF_3P_TeamGrabFlag" )
			bankrupt(victim, attacker)

			AddTeamScore( attacker.GetTeam(), file.reset_kill_value )
			attacker.AddToPlayerGameStat( PGS_ASSAULT_SCORE, file.reset_kill_value )
		}
	}
	
	if ( attacker == victim ) // suicide
	{
		string message = victim.GetPlayerName() + " committed suicide"
		string description = " R.I.P " + victim.GetPlayerName()
		thread sendAnnoucementToAll(message, description,1)

		DeRank( victim )
	}
	else
	{
        // Heal & stim attacker after kill
        if (IsAlive(attacker)) {
            attacker.SetHealth(attacker.GetMaxHealth())
			StatusEffect_AddTimed( attacker, eStatusEffect.speed_boost, 0.4, 4.25, 0.25)
        }
		if( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.mp_weapon_grenade_sonar ){
			// to check if the best player got killed, for an sns like experience
			if(victim == GetWinningPlayer())
				thread sendAnnoucementToAll("Score leader bankrupt",  attacker.GetPlayerName() + " bankrupted the score leader: " + victim.GetPlayerName(),1)
			
			//removes the score from the victim
			int bankruptValue = GetPBScoreRemove(victim)
			AddTeamScore( victim.GetTeam(), -bankruptValue)
			victim.SetPlayerGameStat( PGS_ASSAULT_SCORE, GameRules_GetTeamScore( victim.GetTeam() )) //first argument is what to change, 2nd is what to change it to
			attacker.SetPlayerGameStat(PGS_NPC_KILLS, attacker.GetPlayerGameStat(PGS_NPC_KILLS)+1 )
			victim.SetPlayerGameStat(PGS_TITAN_KILLS, victim.GetPlayerGameStat(PGS_TITAN_KILLS)+1 )
			thread RemovePilotKill( attacker )

			//Re-gives pulse blade
			if ( IsValid( attacker.GetOffhandWeapon(0) ))
			{
				if( attacker.GetOffhandWeapon(0).GetWeaponClassName() == "mp_weapon_grenade_sonar" )
				{
				attacker.TakeWeaponNow( "mp_weapon_grenade_sonar" )
				attacker.GiveOffhandWeapon( "mp_weapon_grenade_sonar", 0 )
				}
			}
			else
			{
				if ( IsValid( attacker.GetOffhandWeapon(2) ))
				{
					if( attacker.GetOffhandWeapon(2).GetWeaponClassName() == "mp_weapon_grenade_sonar" )
					{
						attacker.TakeWeaponNow( "mp_weapon_grenade_sonar" )
						attacker.GiveOffhandWeapon( "mp_weapon_grenade_sonar", 2 )
					}
				}
			}
			
			//messages for attacker and victim
			string victimMessage = attacker.GetPlayerName()+" bankrupted you"
			string victimDescription =  "You lost all your points."
			string attackerMessage = "You bankrupted " + victim.GetPlayerName() +"."
			string attackerDescription = "They lost all their points."
			
			//send those messages
			NSSendAnnouncementMessageToPlayer( victim,victimMessage , victimDescription, <254,0,0>, 3, 7)
			NSSendAnnouncementMessageToPlayer( attacker,attackerMessage , attackerDescription, <254,0,0>, 3, 7)
			
			// remove
			if(playerHSNames.find(victim.GetPlayerName())!=-1)
				playerHSNames.remove( playerHSNames.find( victim.GetPlayerName() ) )
		}
		if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.mp_weapon_thermite_grenade )
		{
			thread RemovePilotKill( attacker )
		}

		if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) != eDamageSourceId.melee_pilot_emptyhanded )
		{		
			float percentageReward = GetCurrentPlaylistVarFloat( "gg_kill_reward", 1.0 )
			string scoreEvent = "KillPilot"

			if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.human_execution )
			{
				string message = victim.GetPlayerName() + " got executed by " + attacker.GetPlayerName()
				string description = " R.I.P " + victim.GetPlayerName()
				thread sendAnnoucementToAll(message, description,1)

				DeRank( victim )
				attacker.SetPlayerGameStat(PGS_NPC_KILLS, attacker.GetPlayerGameStat(PGS_NPC_KILLS)+1 )
				victim.SetPlayerGameStat(PGS_TITAN_KILLS, victim.GetPlayerGameStat(PGS_TITAN_KILLS)+1 )

				percentageReward = GetCurrentPlaylistVarFloat( "gg_execution_reward", 1.0 )
				scoreEvent = "Execution"
			}
			if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.mp_weapon_thermite_grenade){
				percentageReward = 0.0
			}
			if( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.mp_weapon_grenade_sonar && GameRules_GetTeamScore( attacker.GetTeam() ) != GetGunGameWeapons().len()-1 )
			{
				percentageReward = 0.0
			}
			// adds the attacker to the hs array if they've reached the final weapon
			if( GameRules_GetTeamScore( attacker.GetTeam() ) == GetGunGameWeapons().len()-2 )
			{
				playerHSNames.append( attacker.GetPlayerName() )
				if(!(attacker.GetPlayerName() in playerHSKills))
					playerHSKills[attacker.GetPlayerName()] <- 0
			}
			Reward( attacker, victim, scoreEvent, percentageReward )
			
			//killstreak handler
			killStreak[attacker.GetPlayerName()]++
			if(killStreak[victim.GetPlayerName()]>=10)
			   	foreach(entity p in GetPlayerArray())
					NSSendAnnouncementMessageToPlayer(p,attacker.GetPlayerName()+ " ended "+ victim.GetPlayerName()+"s kill streak", "The "+ killStreak[victim.GetPlayerName()]+ "-kill streak was ended with the "+  GetGunNameByID( DamageInfo_GetDamageSourceIdentifier( damageInfo ) ), <0,0,0>,1,1 )

			killStreak[victim.GetPlayerName()] = 0
			if(killStreak[attacker.GetPlayerName()]%10 == 0 && killStreak[attacker.GetPlayerName()] != 0)
			   	foreach(entity p in GetPlayerArray())
			   		NSSendAnnouncementMessageToPlayer(p,attacker.GetPlayerName()+ " is on a "+killStreak[attacker.GetPlayerName()]+"-kill streak","", <0,0,0>,1,1 )

		} else{
			if(playerHSNames.find( attacker.GetPlayerName() ) != -1 && !hsOn ){
				playerHSKills[attacker.GetPlayerName()]++
				if(playerHSKills[attacker.GetPlayerName()]>= HSLimit){
					playerHSNames.remove( playerHSNames.find( attacker.GetPlayerName() ) )
					NSSendPopUpMessageToPlayer(attacker, "If you keep abusing meleeport it will be removed from you")
					UpdateLoadout(attacker)
				}
				if(playerHSKills[attacker.GetPlayerName()] == HSLimit/2)
					NSSendPopUpMessageToPlayer(attacker, "Meleeport has been removed from you")
			}
		}
	}

	table<int, bool> alreadyAssisted
	foreach( DamageHistoryStruct attackerInfo in victim.e.recentDamageHistory )
	{
        if ( !IsValid( attackerInfo.attacker ) || !attackerInfo.attacker.IsPlayer() || attackerInfo.attacker == victim )
                    continue

		if( attackerInfo.attacker != attacker && !( attackerInfo.attacker.GetEncodedEHandle() in alreadyAssisted ) )
		{
			if ( attackerInfo.damageSourceId != eDamageSourceId.melee_pilot_emptyhanded ) {
				alreadyAssisted[attackerInfo.attacker.GetEncodedEHandle()] <- true

				Reward( attackerInfo.attacker, victim, "PilotAssist", GetCurrentPlaylistVarFloat( "gg_assist_reward", 0.0 ) )
			}
		}
	}
	if( GameRules_GetTeamScore(attacker.GetTeam()) > GetGunGameWeapons().len())
		SetRoundWinningKillReplayAttacker(attacker)
	
}

void function Reward( entity player, entity victim, string scoreEvent, float percentageReward )
{
	percentageReward = clamp(percentageReward, 0.0, 1.0)
	Sv_GGEarnMeter_AddPercentage( player, percentageReward )
	Remote_CallFunction_NonReplay( player, "ServerCallback_ScoreEvent", GetScoreEvent(scoreEvent).eventId, 0, eEventDisplayType.MEDAL, victim.GetEncodedEHandle(), 0.0, percentageReward)
}

void function DeRank( entity player )
{
	Sv_GGEarnMeter_SetPercentage( player, 0.0 )

	if ( GameRules_GetTeamScore( player.GetTeam() ) != 0 )
	{
		AddTeamScore( player.GetTeam(), -1 ) // get absolutely fucking destroyed lol
		player.AddToPlayerGameStat( PGS_ASSAULT_SCORE, -1 )
		UpdateLoadout( player )
	}
}

bool function OnGGEarnMeterFilled( entity player )
{
	AddTeamScore( player.GetTeam(), 1 )
	player.AddToPlayerGameStat( PGS_ASSAULT_SCORE, 1 )
	UpdateLoadout( player )

	int currentScore = GameRules_GetTeamScore( player.GetTeam() )
	int maxScore = GetGunGameWeapons().len()

	return currentScore >= maxScore
}

void function UpdateLoadout( entity player )
{
	// todo: honestly, this should be reworked to use PilotLoadoutDefs instead of directly modifying weapons and shit

	int currentWeaponIndex = GameRules_GetTeamScore( player.GetTeam() )
	array<GunGameWeapon> weapons = GetGunGameWeapons()

	if ( currentWeaponIndex >= weapons.len() )
		currentWeaponIndex = weapons.len() - 1

	if ( currentWeaponIndex > weapons.len() - 3 ) // play end of game music for special or last few weapons
		PlayMusicToAll( eMusicPieceID.LEVEL_LAST_MINUTE ) // this *shouldn't* overlap if done multiple times

	GunGameWeapon weapon = weapons[ currentWeaponIndex ]

	foreach ( entity weapon in player.GetMainWeapons() )
		player.TakeWeaponNow( weapon.GetWeaponClassName() )

	foreach ( entity weapon in player.GetOffhandWeapons() )
		player.TakeWeaponNow( weapon.GetWeaponClassName() )

	if ( weapon.offhandSlot != -1)
	{
		player.GiveOffhandWeapon( weapon.weapon, weapon.offhandSlot, weapon.mods )
		if( weapon.offhandSlot == 0 )
		{
			if( player.GetOffhandWeapon(0).GetWeaponClassName() != "mp_weapon_grenade_sonar" )
			{
			if( !IsValid( player.GetOffhandWeapon(2) ) )
				player.GiveOffhandWeapon( "mp_weapon_grenade_sonar", 2 )
			}
		}


		if( playerHSNames.find( player.GetPlayerName() ) == -1 )
			player.GiveOffhandWeapon( "melee_pilot_kunai", OFFHAND_MELEE, [ "allow_as_primary" ] )
		else
			player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE, [ "allow_as_primary" ] )
			
		player.SetActiveWeaponByName( player.GetOffhandWeapon( OFFHAND_MELEE ).GetWeaponClassName() ) // Let the player use the melee in the primary slot, and then force equip it. Effectively gives them an empty hand.
	}
    else
    {
        player.GiveWeapon( weapon.weapon, weapon.mods )

        if( playerHSNames.find( player.GetPlayerName() ) == -1 )
            player.GiveOffhandWeapon( "melee_pilot_kunai", OFFHAND_MELEE )
        else
            player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE )
    }

   // PhaseShift, Pulse, Firestar
    if( weapon.offhandSlot != 0 )
         player.GiveOffhandWeapon ( "mp_weapon_thermite_grenade", OFFHAND_LEFT, [])

    if( weapon.offhandSlot == 0 && weapon.weapon != "mp_weapon_grenade_sonar" ){
        player.GiveOffhandWeapon( "mp_ability_shifter", OFFHAND_INVENTORY, [])
		player.GiveOffhandWeapon ( "mp_weapon_thermite_grenade", OFFHAND_LEFT )        
    }
    else
    {
        player.GiveOffhandWeapon( "mp_ability_shifter", OFFHAND_INVENTORY, [])
        player.GiveOffhandWeapon( "mp_weapon_grenade_sonar", OFFHAND_RIGHT )        
    }  	
}

void function bankrupt(entity player, entity attacker) {
	while (GameRules_GetTeamScore(player.GetTeam()) > 0) {
		AddTeamScore( player.GetTeam(), -1 )
	}
	player.SetPlayerGameStat( PGS_ASSAULT_SCORE, 0)
}

void function OnWinnerDetermined()
{
	SetRespawnsEnabled( false )
	SetKillcamsEnabled( false )

	playerHSNames.clear()
}

// CUSTOM
void function OnClientConnected(entity player) {
	//player has left and rejoined the game, restores their score
	if(player.GetPlayerName() in SaveScore){
		AddTeamScore( player.GetTeam(), SaveScore[player.GetPlayerName()] )
		player.AddToPlayerGameStat( PGS_ASSAULT_SCORE, SaveScore[player.GetPlayerName()] )
		NSSendInfoMessageToPlayer(player, "Your score has been restored")
		printt("Score of "+player.GetPlayerName()+" has been restored")
	}
	//add player to the Killstreak table
	if(!( player.GetPlayerName() in killStreak )){
		killStreak[player.GetPlayerName()] <- 0
	}
    printt("[GUN GAME] OnClientConnected", player, "team", player.GetTeam())
	if(hsOn) // if house flies is enabled add player to hsplayers array
		playerHSNames.append( player.GetPlayerName() )
}

//from the sns code lol
void function SetHighlight(entity player) {
	foreach ( entity player in GetPlayerArray() )
		Highlight_ClearEnemyHighlight(player)
	Highlight_SetEnemyHighlight( player, file.score_leader_highlight )
}

void function CheckNewHighlight(entity player)
{
	while (IsValid(player)) //wait till disconnected player not exist
		wait 0.25

	entity winner = GetWinningPlayer()
	if (IsValid(winner))
		SetHighlight(winner)
}

entity function GetWinningPlayer()
{
	entity bestplayer

	foreach ( entity player in GetPlayerArray() ) {
		if (bestplayer == null)
			bestplayer = player

		if (GameRules_GetTeamScore(player.GetTeam()) > GameRules_GetTeamScore(bestplayer.GetTeam()))
			bestplayer = player
	}

	return bestplayer
}

//function that handles the bankrupting
int function GetPBScoreRemove(entity player){
	int score = GameRules_GetTeamScore(player.GetTeam())
	int PAdditionsalScore = score/5
	if(score <= 5)
		return score
	return bankrupt_base_value + PAdditionsalScore
}

//Hi spoon you told me not to but HERE WE ARE
string function GetGunNameByID(int ID) {
	try{
	  switch(DamageSourceIDToString(ID)){
		case "mp_weapon_peacekraber" : return "Peacekeeper"
		case "mp_weapon_gunship_turret" : return "Gunship Turret"
		case "mp_weapon_arena2" : return "Arena 2"
		case "mp_weapon_arena3": return "Arena 3"
		case "mp_weapon_smart_pistol" : return "Smart Pistol"
		case "mp_titanweapon_flightcore_rockets" : return "FLightcore Rocket"
		case "melee_titan_sword" : return "Ronin Sword"
		case "mp_titanweapon_leadwall" : return "Leadwall"
		case "mp_titanweapon_sniper" : return "Railgun"
		case "mp_titanweapon_particle_accelerator" : return "Particle accelerator"
		case "mp_titanweapon_meteor" : return "Thermite"
		case "mp_titanweapon_sticky_40mm" : return "40mm"
		case "mp_titanweapon_predator_cannon" : return "Predator Cannon"
		case "mp_titanweapon_xo16_vanguard" : return "XO-16"
		case "mp_titanweapon_triplethreat" : return "Tripple Thread"
		case "mp_titanweapon_arc_wave" : return "Arc Wave"
		case "mp_titanweapon_heat_shield" : return "Heat Shield"
		case "mp_weapon_car" : return "Car"
		case "mp_weapon_alternator_smg" : return "Alternator"
		case "mp_weapon_hemlok_smg" : return "Volt"
		case "mp_weapon_r97" : return "R97"
		case "mp_weapon_hemlok" : return "Hemlok"
		case "mp_weapon_vinson" : return "Flatline"
		case "mp_weapon_rspn101" : return "R201"
		case "mp_weapon_g2" : return "G2"
		case "mp_weapon_rspn101_og" : return "R101"
		case "mp_weapon_esaw" : return "Devotion"
		case "mp_weapon_lstar" : return "L-Star"
		case "mp_weapon_lmg" : return "Spitfire"
		case "mp_weapon_shotgun" : return "Eva"
		case "mp_weapon_mastiff" : return "Mastiff"
		case "mp_weapon_softball" : return "Softball"
		case "mp_weapon_epg" : return "EPG"
		case "mp_weapon_smr" : return "SMR"
		case "mp_weapon_pulse_lmg" : return "Cold War"
		case "mp_weapon_shotgun_pistol" : return "Mozambique"
		case "mp_weapon_wingman_n" : return "Wingman Elite"
		case "mp_weapon_doubletake" : return "Doubletake"
		case "mp_weapon_sniper" : return "Kraber"
		case "mp_weapon_dmr" : return "DMR Longbow"
		case "mp_weapon_autopistol" : return "RE-45"
		case "mp_weapon_semipistol" : return "P2016"
		case "mp_weapon_wingman" : return "b3 Wingman"
		case "mp_weapon_defender" : return "Chargerifle"
		case "mp_weapon_grenade_sonar" : return "Pulse Blade"
		default: return "<Gun Not available>"
	  }
	return "<Gun Not available>"
}catch(ex){return "<Gun Not available>"}
}

void function sendAnnoucementToAll(string title,  string description,int style){
	WaitFrame() // THANKS FIFTS
	foreach(entity player in GetPlayerArray())
		NSSendAnnouncementMessageToPlayer( player,  title,  description, <0,0,0>, 3, style)	
}


